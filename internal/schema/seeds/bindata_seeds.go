// Package seeds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// internal/schema/seeds/01_products_seed.down.sql
// internal/schema/seeds/01_products_seed.up.sql
package seeds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_products_seedDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\xbb\x0a\xc2\x40\x10\x05\xd0\xde\xaf\xd8\x2e\xd5\x40\xf6\xbd\x43\xb0\x73\xc4\x42\x11\x82\x60\x29\xde\x99\x0d\x58\x29\x3e\xfe\xdf\xca\xde\xf2\x34\x67\x23\x7b\x39\x89\xdb\xce\xc7\x83\x7b\x3c\xef\xf6\xd1\xf7\xcb\x9d\x77\x32\xcb\x8f\x97\x9b\xb9\xb5\x1b\xae\x01\x63\x89\xbc\x50\x50\x2d\x94\x12\x1a\x81\x2b\xc8\x67\x2b\x6c\x40\xf6\xbe\x0f\xd3\xea\xef\xaf\x86\xa5\x81\x5b\xa4\xd8\x91\x28\x35\x03\x71\xb7\x91\x7a\xca\xaa\x05\x56\x7d\xc1\x30\x7d\x03\x00\x00\xff\xff\x47\x43\x81\x5f\x9f\x00\x00\x00")

func _01_products_seedDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_products_seedDownSql,
		"01_products_seed.down.sql",
	)
}

func _01_products_seedDownSql() (*asset, error) {
	bytes, err := _01_products_seedDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_products_seed.down.sql", size: 159, mode: os.FileMode(420), modTime: time.Unix(1564565764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __01_products_seedUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x4d\x6b\x32\x31\x10\xc7\xcf\xfa\x29\xe6\x16\xe5\x49\x1e\x26\x31\xfb\x92\xf6\xd4\xaa\x6d\x17\x6c\x16\xea\xb6\x57\xc9\x9b\x20\xad\x1b\xeb\x66\x0f\x7e\xfb\x12\xf0\xd0\x43\xc1\x61\x60\x66\xe0\xc7\xfc\x7f\x8d\xde\xae\xdf\x3a\x68\x74\xd7\xc2\xe9\x1c\xfd\xe8\xd2\x00\xb3\xeb\xb6\x3b\x78\x0a\xbd\x39\x06\x0a\x2e\x0e\x89\xc2\xf7\x68\xfa\x74\x48\x17\x0a\xde\xa4\xb0\x73\xe7\x60\x52\xf0\xd7\x6b\x3c\xe5\xe1\xe7\xf0\xf1\xb0\x79\x5f\x6f\xa7\x93\x19\x31\xc2\x62\xb9\x50\x7b\x26\x9c\x2b\x99\x94\xb6\x66\x56\x55\x96\xf1\xc2\x97\xca\x5b\x5b\x70\x1e\x08\x05\xb2\x8c\xc7\x83\x83\xc7\x18\x3f\x07\x42\xa1\x40\x0a\x52\x50\x20\x02\xb9\x62\xc8\x19\x72\x40\xbc\xcb\xcd\xff\x63\x2e\xfe\x0f\x91\xdc\x04\xe6\x34\x3b\x54\x62\x5f\x5b\x55\x2f\xd8\x22\x58\xc9\x64\xed\x2d\x53\xc1\x23\x0b\xb2\x70\xae\xb4\xbe\xe2\xa5\xcd\xbf\x5e\xdd\x2a\xf6\xe6\xcb\x0f\xd0\xc5\x4b\xd6\xa8\x0a\x0a\x5c\xe0\x9f\x31\xe2\x96\xc7\x6f\x60\x3e\x9d\xb4\x1a\x96\xad\x7e\xda\x34\xcb\x0e\x56\x2d\xe8\xb6\x7b\x69\xf4\xf3\xfd\xf4\x27\x00\x00\xff\xff\x8d\xe4\x09\x34\x7f\x01\x00\x00")

func _01_products_seedUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_products_seedUpSql,
		"01_products_seed.up.sql",
	)
}

func _01_products_seedUpSql() (*asset, error) {
	bytes, err := _01_products_seedUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_products_seed.up.sql", size: 383, mode: os.FileMode(420), modTime: time.Unix(1564565664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_products_seed.down.sql": _01_products_seedDownSql,
	"01_products_seed.up.sql":   _01_products_seedUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_products_seed.down.sql": &bintree{_01_products_seedDownSql, map[string]*bintree{}},
	"01_products_seed.up.sql":   &bintree{_01_products_seedUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
