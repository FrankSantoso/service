// Package migrations Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// internal/schema/migrations/01_products.down.sql
// internal/schema/migrations/01_products.up.sql
// internal/schema/migrations/02_sales.down.sql
// internal/schema/migrations/02_sales.up.sql
// internal/schema/migrations/03_users.down.sql
// internal/schema/migrations/03_users.up.sql
// internal/schema/migrations/04_add_users_to_products.down.sql
// internal/schema/migrations/04_add_users_to_products.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_productsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\xca\x4f\x29\x4d\x2e\x29\xb6\x06\x04\x00\x00\xff\xff\xff\x10\xab\x0b\x1e\x00\x00\x00")

func _01_productsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_productsDownSql,
		"01_products.down.sql",
	)
}

func _01_productsDownSql() (*asset, error) {
	bytes, err := _01_productsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_products.down.sql", size: 30, mode: os.FileMode(420), modTime: time.Unix(1564565273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __01_productsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x28\x28\xca\x4f\x29\x4d\x2e\x29\x56\xd0\xe0\xe2\x84\xb2\xe3\x33\x53\x14\x14\x14\x42\x43\x3d\x5d\x74\xb8\x38\xf3\x12\x73\x53\x15\x60\x20\xc4\x35\x22\x44\x87\x8b\x33\x39\xbf\xb8\x04\x2e\xe6\xe9\x07\x12\x2a\x2c\x4d\xcc\x2b\xc9\x2c\xa9\x44\x12\x4a\x49\x2c\x49\x8d\x4f\x2e\x4a\x4d\x2c\x49\x4d\x51\x08\xf1\xf4\x75\x0d\x0e\x71\xf4\x0d\x80\x49\x94\x16\xa4\xa0\x4b\x70\x71\x06\x04\x79\xfa\x3a\x06\x45\x2a\x78\xbb\x46\x2a\x68\x20\x5c\xa3\xc9\xa5\x69\x0d\x08\x00\x00\xff\xff\x37\xbe\x7d\x05\xb5\x00\x00\x00")

func _01_productsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_productsUpSql,
		"01_products.up.sql",
	)
}

func _01_productsUpSql() (*asset, error) {
	bytes, err := _01_productsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_products.up.sql", size: 181, mode: os.FileMode(420), modTime: time.Unix(1564565279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_salesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x4e\xcc\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\x48\xe0\x56\xfd\x1b\x00\x00\x00")

func _02_salesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_salesDownSql,
		"02_sales.down.sql",
	)
}

func _02_salesDownSql() (*asset, error) {
	bytes, err := _02_salesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_sales.down.sql", size: 27, mode: os.FileMode(420), modTime: time.Unix(1564565316, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_salesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x3d\x8e\x83\x30\x10\x05\xe0\xda\x3e\xc5\x94\x20\x71\x83\xad\xbc\xe6\xb1\xb2\x16\x0c\x32\xa6\xa0\x42\x16\x76\x81\xb4\xda\x24\x60\x8a\xdc\x3e\xe2\x27\x89\x32\xd5\xe8\x9b\x37\x7a\xd2\x40\x58\x90\x15\xdf\x25\x68\x71\x7f\x61\xa1\x84\xb3\x6d\x19\x26\x4f\xfb\x74\x9d\xca\x33\xce\xae\xf3\xc5\xaf\x63\x3c\xf8\xb4\xdb\xea\xfe\xe3\x14\xef\x7b\x4e\x69\xbb\xc5\xdc\xf3\xef\x45\xde\xc5\x30\x8c\x73\x70\x31\x78\xb2\xaa\x42\x6b\x45\xd5\x64\x9c\xb3\xc6\xa8\x4a\x98\x9e\x7e\xd1\x53\x72\x96\xa6\x19\x67\x45\x6d\xa0\x7e\xf4\xe1\xef\xe2\x94\x0c\x0a\x18\x68\x89\x96\x4e\x5e\x3e\xee\xb5\xa6\x1c\x25\x2c\x48\x8a\x56\x8a\x1c\x3c\xfd\x7a\x04\x00\x00\xff\xff\xa0\xfd\x25\xea\xe3\x00\x00\x00")

func _02_salesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_salesUpSql,
		"02_sales.up.sql",
	)
}

func _02_salesUpSql() (*asset, error) {
	bytes, err := _02_salesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_sales.up.sql", size: 227, mode: os.FileMode(420), modTime: time.Unix(1564565297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xc8\x3d\x4e\x55\x1b\x00\x00\x00")

func _03_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__03_usersDownSql,
		"03_users.down.sql",
	)
}

func _03_usersDownSql() (*asset, error) {
	bytes, err := _03_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_users.down.sql", size: 27, mode: os.FileMode(420), modTime: time.Unix(1564565361, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xc1\xaa\x83\x30\x10\x45\xd7\x33\x5f\x31\x4b\x85\xfc\xc1\x5b\xe5\xbd\x37\x8b\xd0\x5a\xac\x4d\xa0\x52\x8a\x84\x66\x40\x41\xab\x24\x4a\x7f\xbf\x94\x4a\xc1\x9e\xd5\xe5\x1e\xb8\xdc\xbf\x8a\xb5\x65\xb2\xfa\x77\xcf\xb4\x24\x89\x89\x32\x84\x57\x68\xba\x40\x6f\x9c\x33\xff\x0a\xe1\xee\x07\xa1\x0f\x96\xcf\x56\x21\xc8\xe0\xbb\x7e\x53\x92\x3b\x98\xa3\x63\x85\x10\xc7\x5e\xd2\xc6\x5d\xae\x0a\x61\xf2\x29\x3d\xc6\x18\x9a\xd6\xa7\x76\xdd\x41\x08\x7e\x96\xe6\x16\xc5\xcf\x12\xc8\x9a\x82\x4f\x56\x17\xa5\x5a\xc5\x32\x85\x6f\x81\x50\x56\xa6\xd0\x55\x4d\x3b\xae\x29\x5b\x2f\xe7\x98\xff\x3c\x03\x00\x00\xff\xff\x1a\xc1\x51\x8a\xd4\x00\x00\x00")

func _03_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__03_usersUpSql,
		"03_users.up.sql",
	)
}

func _03_usersUpSql() (*asset, error) {
	bytes, err := _03_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_users.up.sql", size: 212, mode: os.FileMode(420), modTime: time.Unix(1564565347, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __04_add_users_to_productsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\xca\x4f\x29\x4d\x2e\x29\xe6\x52\x50\x50\x50\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2d\x4e\x2d\x8a\xcf\x4c\xb1\x06\x04\x00\x00\xff\xff\x5f\xf6\x95\x80\x2d\x00\x00\x00")

func _04_add_users_to_productsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__04_add_users_to_productsDownSql,
		"04_add_users_to_products.down.sql",
	)
}

func _04_add_users_to_productsDownSql() (*asset, error) {
	bytes, err := _04_add_users_to_productsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "04_add_users_to_products.down.sql", size: 45, mode: os.FileMode(420), modTime: time.Unix(1564565444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __04_add_users_to_productsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\xca\x4f\x29\x4d\x2e\x29\xe6\xe2\x74\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2d\x4e\x2d\x8a\xcf\x4c\x51\x08\x0d\xf5\x74\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x37\x80\x02\x5d\x2c\x04\x0c\xa8\x5b\x03\x02\x00\x00\xff\xff\xbe\xb0\x3d\x01\x5d\x00\x00\x00")

func _04_add_users_to_productsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__04_add_users_to_productsUpSql,
		"04_add_users_to_products.up.sql",
	)
}

func _04_add_users_to_productsUpSql() (*asset, error) {
	bytes, err := _04_add_users_to_productsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "04_add_users_to_products.up.sql", size: 93, mode: os.FileMode(420), modTime: time.Unix(1564565396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_products.down.sql":              _01_productsDownSql,
	"01_products.up.sql":                _01_productsUpSql,
	"02_sales.down.sql":                 _02_salesDownSql,
	"02_sales.up.sql":                   _02_salesUpSql,
	"03_users.down.sql":                 _03_usersDownSql,
	"03_users.up.sql":                   _03_usersUpSql,
	"04_add_users_to_products.down.sql": _04_add_users_to_productsDownSql,
	"04_add_users_to_products.up.sql":   _04_add_users_to_productsUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_products.down.sql":              &bintree{_01_productsDownSql, map[string]*bintree{}},
	"01_products.up.sql":                &bintree{_01_productsUpSql, map[string]*bintree{}},
	"02_sales.down.sql":                 &bintree{_02_salesDownSql, map[string]*bintree{}},
	"02_sales.up.sql":                   &bintree{_02_salesUpSql, map[string]*bintree{}},
	"03_users.down.sql":                 &bintree{_03_usersDownSql, map[string]*bintree{}},
	"03_users.up.sql":                   &bintree{_03_usersUpSql, map[string]*bintree{}},
	"04_add_users_to_products.down.sql": &bintree{_04_add_users_to_productsDownSql, map[string]*bintree{}},
	"04_add_users_to_products.up.sql":   &bintree{_04_add_users_to_productsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
