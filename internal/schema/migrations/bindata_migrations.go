// Package migrations Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// internal/schema/migrations/01_products.down.sql
// internal/schema/migrations/01_products.up.sql
// internal/schema/migrations/02_sales.down.sql
// internal/schema/migrations/02_sales.up.sql
// internal/schema/migrations/03_users.down.sql
// internal/schema/migrations/03_users.up.sql
// internal/schema/migrations/04_add_users_to_products.down.sql
// internal/schema/migrations/04_add_users_to_products.up.sql
// internal/schema/migrations/05_seed.down.sql
// internal/schema/migrations/05_seed.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_productsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\xca\x4f\x29\x4d\x2e\x29\xb6\x06\x04\x00\x00\xff\xff\xff\x10\xab\x0b\x1e\x00\x00\x00")

func _01_productsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_productsDownSql,
		"01_products.down.sql",
	)
}

func _01_productsDownSql() (*asset, error) {
	bytes, err := _01_productsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_products.down.sql", size: 30, mode: os.FileMode(420), modTime: time.Unix(1564565273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __01_productsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x28\x28\xca\x4f\x29\x4d\x2e\x29\x56\xd0\xe0\xe2\x84\xb2\xe3\x33\x53\x14\x14\x14\x42\x43\x3d\x5d\x74\xb8\x38\xf3\x12\x73\x53\x15\x60\x20\xc4\x35\x22\x44\x87\x8b\x33\x39\xbf\xb8\x04\x2e\xe6\xe9\x07\x12\x2a\x2c\x4d\xcc\x2b\xc9\x2c\xa9\x44\x12\x4a\x49\x2c\x49\x8d\x4f\x2e\x4a\x4d\x2c\x49\x4d\x51\x08\xf1\xf4\x75\x0d\x0e\x71\xf4\x0d\x80\x49\x94\x16\xa4\xa0\x4b\x70\x71\x06\x04\x79\xfa\x3a\x06\x45\x2a\x78\xbb\x46\x2a\x68\x20\x5c\xa3\xc9\xa5\x69\x0d\x08\x00\x00\xff\xff\x37\xbe\x7d\x05\xb5\x00\x00\x00")

func _01_productsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_productsUpSql,
		"01_products.up.sql",
	)
}

func _01_productsUpSql() (*asset, error) {
	bytes, err := _01_productsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_products.up.sql", size: 181, mode: os.FileMode(420), modTime: time.Unix(1564565279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_salesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x4e\xcc\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\x48\xe0\x56\xfd\x1b\x00\x00\x00")

func _02_salesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_salesDownSql,
		"02_sales.down.sql",
	)
}

func _02_salesDownSql() (*asset, error) {
	bytes, err := _02_salesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_sales.down.sql", size: 27, mode: os.FileMode(420), modTime: time.Unix(1564565316, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_salesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x3d\x8e\x83\x30\x10\x05\xe0\xda\x3e\xc5\x94\x20\x71\x83\xad\xbc\xe6\xb1\xb2\x16\x0c\x32\xa6\xa0\x42\x16\x76\x81\xb4\xda\x24\x60\x8a\xdc\x3e\xe2\x27\x89\x32\xd5\xe8\x9b\x37\x7a\xd2\x40\x58\x90\x15\xdf\x25\x68\x71\x7f\x61\xa1\x84\xb3\x6d\x19\x26\x4f\xfb\x74\x9d\xca\x33\xce\xae\xf3\xc5\xaf\x63\x3c\xf8\xb4\xdb\xea\xfe\xe3\x14\xef\x7b\x4e\x69\xbb\xc5\xdc\xf3\xef\x45\xde\xc5\x30\x8c\x73\x70\x31\x78\xb2\xaa\x42\x6b\x45\xd5\x64\x9c\xb3\xc6\xa8\x4a\x98\x9e\x7e\xd1\x53\x72\x96\xa6\x19\x67\x45\x6d\xa0\x7e\xf4\xe1\xef\xe2\x94\x0c\x0a\x18\x68\x89\x96\x4e\x5e\x3e\xee\xb5\xa6\x1c\x25\x2c\x48\x8a\x56\x8a\x1c\x3c\xfd\x7a\x04\x00\x00\xff\xff\xa0\xfd\x25\xea\xe3\x00\x00\x00")

func _02_salesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_salesUpSql,
		"02_sales.up.sql",
	)
}

func _02_salesUpSql() (*asset, error) {
	bytes, err := _02_salesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_sales.up.sql", size: 227, mode: os.FileMode(420), modTime: time.Unix(1564565297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xc8\x3d\x4e\x55\x1b\x00\x00\x00")

func _03_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__03_usersDownSql,
		"03_users.down.sql",
	)
}

func _03_usersDownSql() (*asset, error) {
	bytes, err := _03_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_users.down.sql", size: 27, mode: os.FileMode(420), modTime: time.Unix(1564565361, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xc1\xaa\x83\x30\x10\x45\xd7\x33\x5f\x31\x4b\x85\xfc\xc1\x5b\xe5\xbd\x37\x8b\xd0\x5a\xac\x4d\xa0\x52\x8a\x84\x66\x40\x41\xab\x24\x4a\x7f\xbf\x94\x4a\xc1\x9e\xd5\xe5\x1e\xb8\xdc\xbf\x8a\xb5\x65\xb2\xfa\x77\xcf\xb4\x24\x89\x89\x32\x84\x57\x68\xba\x40\x6f\x9c\x33\xff\x0a\xe1\xee\x07\xa1\x0f\x96\xcf\x56\x21\xc8\xe0\xbb\x7e\x53\x92\x3b\x98\xa3\x63\x85\x10\xc7\x5e\xd2\xc6\x5d\xae\x0a\x61\xf2\x29\x3d\xc6\x18\x9a\xd6\xa7\x76\xdd\x41\x08\x7e\x96\xe6\x16\xc5\xcf\x12\xc8\x9a\x82\x4f\x56\x17\xa5\x5a\xc5\x32\x85\x6f\x81\x50\x56\xa6\xd0\x55\x4d\x3b\xae\x29\x5b\x2f\xe7\x98\xff\x3c\x03\x00\x00\xff\xff\x1a\xc1\x51\x8a\xd4\x00\x00\x00")

func _03_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__03_usersUpSql,
		"03_users.up.sql",
	)
}

func _03_usersUpSql() (*asset, error) {
	bytes, err := _03_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_users.up.sql", size: 212, mode: os.FileMode(420), modTime: time.Unix(1564565347, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __04_add_users_to_productsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\xca\x4f\x29\x4d\x2e\x29\xe6\x52\x50\x50\x50\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2d\x4e\x2d\x8a\xcf\x4c\xb1\x06\x04\x00\x00\xff\xff\x5f\xf6\x95\x80\x2d\x00\x00\x00")

func _04_add_users_to_productsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__04_add_users_to_productsDownSql,
		"04_add_users_to_products.down.sql",
	)
}

func _04_add_users_to_productsDownSql() (*asset, error) {
	bytes, err := _04_add_users_to_productsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "04_add_users_to_products.down.sql", size: 45, mode: os.FileMode(420), modTime: time.Unix(1564565444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __04_add_users_to_productsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\xca\x4f\x29\x4d\x2e\x29\xe6\xe2\x74\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2d\x4e\x2d\x8a\xcf\x4c\x51\x08\x0d\xf5\x74\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x37\x80\x02\x5d\x2c\x04\x0c\xa8\x5b\x03\x02\x00\x00\xff\xff\xbe\xb0\x3d\x01\x5d\x00\x00\x00")

func _04_add_users_to_productsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__04_add_users_to_productsUpSql,
		"04_add_users_to_products.up.sql",
	)
}

func _04_add_users_to_productsUpSql() (*asset, error) {
	bytes, err := _04_add_users_to_productsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "04_add_users_to_products.up.sql", size: 93, mode: os.FileMode(420), modTime: time.Unix(1564565396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __05_seedDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\xcf\x4a\x73\x41\x0c\x05\xf0\x7d\x9f\xe2\xee\xee\x2a\x30\x7f\x92\x99\x84\xf2\xed\xbe\x2b\x2e\x14\xa1\x08\x2e\x65\x32\x93\x80\x20\x28\xad\x7d\x7f\xb9\xd2\x2e\xac\x14\xba\x3b\xd9\xfc\x38\x27\xff\x97\x87\xe5\x79\x99\xee\x76\x4f\x8f\xd3\xe7\xfe\x63\x1c\xfb\xd7\x61\x7a\xb9\x5f\x76\xcb\xf9\x7c\x7d\x1b\xd3\xbf\x69\x6e\x49\x43\xc9\xe2\x90\x7a\x2f\x80\xa8\x0c\x2a\x55\x21\xd2\x28\x32\x54\x29\x46\x9b\xb7\x9b\x9b\xbd\x9a\x9c\x55\x38\x43\x36\x45\x40\x1e\x0a\x62\x23\x80\x21\xf5\x5e\x74\xd4\x58\x74\xde\x6e\x7e\x81\x87\xf6\x6e\x67\xed\x27\x9f\x2c\x61\x2d\x63\x6d\xe4\x01\x15\xb0\x57\x01\xee\xc9\xa0\x85\x66\x8e\x85\x09\xb5\x5e\x74\xbb\x46\x31\x79\x71\x0d\x02\xa6\x81\x00\xb9\x22\x34\xcb\x02\x9c\x46\x6c\x39\xb8\x85\x71\x2b\xd5\x52\x26\x35\x31\x68\x4a\x03\x10\xad\x40\x13\xae\xe0\x2d\xf6\x8a\x92\x0a\xf6\x7a\xb9\xf0\x78\xb0\xfd\xd9\x5a\xf3\x89\xa2\xee\xb9\xa6\x52\x20\x63\xcd\x80\x21\x14\x10\x46\x07\xc9\x89\x62\x4a\xa5\xf2\x9f\x81\x57\x24\x24\x25\xd7\x91\xa1\x12\x39\x60\x5e\x5f\xe5\xa1\x42\x23\x1e\xb8\x0e\x6c\xc9\xe7\xed\x77\x00\x00\x00\xff\xff\x65\xe2\x16\x22\x16\x02\x00\x00")

func _05_seedDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__05_seedDownSql,
		"05_seed.down.sql",
	)
}

func _05_seedDownSql() (*asset, error) {
	bytes, err := _05_seedDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "05_seed.down.sql", size: 534, mode: os.FileMode(420), modTime: time.Unix(1564640285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __05_seedUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x5d\x6f\x1b\x37\x10\x7c\x8e\x7f\xc5\x22\x30\x20\x1b\x25\x1d\x92\x47\xf2\xc8\xf6\xa5\x8a\xe4\xc4\xb2\x64\x29\xb0\x3e\x92\xe6\xc5\xe0\xa7\x25\x54\xd2\x5d\x8f\xba\xb8\x46\xd1\xff\x5e\x50\x49\x6b\xa5\x76\x10\x47\x10\xc0\x5b\x82\xd8\x99\x9d\x99\x1d\x8c\xa7\xe7\xd7\x33\x18\x8c\x67\x13\xa8\x9b\xca\xb7\x6e\x97\xe0\xe4\xcb\xd7\xcd\xca\x23\xd8\x9a\x4d\x40\xe0\xaa\xb4\x43\xf0\x47\x6b\xb6\xbb\xd5\xee\x1e\x81\x37\xbb\x70\xe3\x9a\x60\x76\xc1\x7f\xa9\xda\x3a\x1f\xfe\x14\x16\xdd\xd1\xfc\x7c\x7a\xf4\xe2\xa4\x63\x98\x25\xb2\xd0\x11\x33\xe7\x24\xe6\xdc\x2a\x6c\x75\x69\x31\x15\x5e\x6a\x6f\xad\xa0\x34\x74\x10\x74\x7a\xd5\x66\xe5\xe0\x75\x55\xfd\x9e\x3a\x08\x04\x41\xc0\x19\x82\x0e\x23\x54\x63\x42\x31\xa1\x40\xc8\xcf\xf9\x4f\xcf\x48\xfe\xd1\x9f\x08\xe9\x7c\xf7\xc1\x29\xca\x1c\x4a\x16\x95\xd5\xaa\xc0\x45\xb0\x1c\x73\xe5\x2d\xd6\xc1\x13\x1c\xb8\x70\x4e\x5a\x5f\x52\x69\x73\xaf\x2b\xd7\xaf\xb6\x66\xed\x13\xcc\xaa\xfb\x4c\xa3\x14\x08\x28\x23\x4f\xc2\xb0\xef\xf1\x38\x7c\x70\x7a\xf4\x62\x32\x86\xde\x64\xfc\x66\x34\xe8\xcd\xa0\x3f\x81\xf1\x64\x76\x31\x18\xbf\xfd\xe5\xe8\xe8\x50\xff\x64\xd6\x21\xc1\x49\x3e\xf6\xca\x1f\xba\xf0\xa0\x7c\x6d\x56\xfe\x6b\xfd\x0f\x15\xd7\xca\x4a\x9f\x75\x8e\x84\x5b\xcc\x5d\xa9\xb1\x72\x2c\x60\x43\x4c\x88\x5c\x2a\xc1\x6d\x99\x19\x3f\xd3\x19\x86\x80\x92\xa7\x25\x28\x1e\x29\xad\x44\x94\xd1\x12\x8d\x83\x25\x02\x73\x55\x72\x6c\x42\xa1\xb1\x62\x9e\x9a\x82\xc4\x40\xfc\x8f\x60\x0b\x04\x4c\x3c\x8d\xcd\x1f\x61\x1b\x56\x08\x1b\x74\xc0\xc6\x0a\x8f\x39\x0f\x12\x1b\xad\x4a\x1c\x0d\x75\x25\xd7\x4c\x72\xb7\xc7\x7e\x66\x1a\x0a\x04\x8c\x89\x27\xb1\xc5\xf3\x9c\xc5\x18\x7a\x7b\x7b\xc0\xf8\xcd\x6a\x0b\x66\xeb\xa1\x09\xb7\xed\xda\x34\x30\x4f\xa1\x81\xbb\xd5\x6e\x09\xb5\x49\xe9\xae\x6a\x3c\xbc\xbc\xad\xea\x65\x68\xd2\xcb\xaf\x12\xd1\xa6\xd0\x24\x38\xc9\xc7\xc1\x2e\x86\x8d\x59\xad\x11\x34\xd5\x3a\x24\xf4\x5f\x8b\x9b\xa5\x49\xcb\xe7\x2e\xa6\x70\xb1\x28\x99\x94\xb8\xe0\x65\x81\x39\x21\x12\x6b\xc5\x23\xd6\x05\x13\x94\x31\x59\xaa\xcf\x31\xe9\xee\xb9\xbf\xdd\x73\xdb\x5b\x97\xeb\x5f\xc3\x9f\x66\x53\xaf\xc3\x99\xab\x36\xf9\xf2\xaf\x6e\xff\x6a\x30\x46\xf3\xe9\xf9\xf5\xdf\xb9\x3e\x66\xe6\x98\x92\x63\x7a\x7b\x1b\xaf\x16\x1f\x17\xf2\x32\x91\x7b\xfb\xe9\xb2\x8d\xa3\xeb\xf9\xe4\xfd\xc5\x54\x44\x39\xdc\x86\xf6\x1d\xf9\x70\x77\x77\x51\x5f\xaa\x91\x5a\xd5\xbe\xb9\xd7\x91\xbd\x32\x0f\xdb\x54\x60\xc6\xff\xd5\x9c\x7c\xeb\xfa\xb3\xf9\x5c\x58\x11\xad\x2f\x70\x29\x44\xc4\xbc\xc8\xa1\x8f\xa4\xc4\x46\x28\xcf\x73\xf2\x0c\x8b\xb9\xc3\x5e\xf7\x87\x61\xb2\xac\x8f\x66\xf9\xff\x14\xfa\xd5\x87\xee\xf4\xdd\xf0\xb5\xbd\x1c\x2e\x62\xaf\xfb\x71\xd8\xbf\x38\x9b\xb7\xcb\xd4\x76\x47\xfd\x46\x7c\x5a\x6c\xe4\xa2\xf9\xad\xab\x17\x6f\xae\x55\xe3\xdc\x50\xc9\x1e\x5d\xbe\xff\xd1\x29\xbe\x19\xa3\x7f\x02\x00\x00\xff\xff\x2a\xed\xc9\xc5\x9f\x05\x00\x00")

func _05_seedUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__05_seedUpSql,
		"05_seed.up.sql",
	)
}

func _05_seedUpSql() (*asset, error) {
	bytes, err := _05_seedUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "05_seed.up.sql", size: 1439, mode: os.FileMode(420), modTime: time.Unix(1564640181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_products.down.sql":              _01_productsDownSql,
	"01_products.up.sql":                _01_productsUpSql,
	"02_sales.down.sql":                 _02_salesDownSql,
	"02_sales.up.sql":                   _02_salesUpSql,
	"03_users.down.sql":                 _03_usersDownSql,
	"03_users.up.sql":                   _03_usersUpSql,
	"04_add_users_to_products.down.sql": _04_add_users_to_productsDownSql,
	"04_add_users_to_products.up.sql":   _04_add_users_to_productsUpSql,
	"05_seed.down.sql":                  _05_seedDownSql,
	"05_seed.up.sql":                    _05_seedUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_products.down.sql":              &bintree{_01_productsDownSql, map[string]*bintree{}},
	"01_products.up.sql":                &bintree{_01_productsUpSql, map[string]*bintree{}},
	"02_sales.down.sql":                 &bintree{_02_salesDownSql, map[string]*bintree{}},
	"02_sales.up.sql":                   &bintree{_02_salesUpSql, map[string]*bintree{}},
	"03_users.down.sql":                 &bintree{_03_usersDownSql, map[string]*bintree{}},
	"03_users.up.sql":                   &bintree{_03_usersUpSql, map[string]*bintree{}},
	"04_add_users_to_products.down.sql": &bintree{_04_add_users_to_productsDownSql, map[string]*bintree{}},
	"04_add_users_to_products.up.sql":   &bintree{_04_add_users_to_productsUpSql, map[string]*bintree{}},
	"05_seed.down.sql":                  &bintree{_05_seedDownSql, map[string]*bintree{}},
	"05_seed.up.sql":                    &bintree{_05_seedUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
